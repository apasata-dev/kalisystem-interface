


# Order process refactor — Plan & TODO

Summary
-------
This document reorganizes the order flow into clear domain models, UI responsibilities, role permissions and a prioritized TODO list. It converts the previous freeform notes into a structured, actionable plan that can be used to implement the bulk/dispatch and single-order workflows.

Goals
-----
- Introduce a clear BulkOrder → Order (supplier) model.
- Make dispatch behavior explicit and rename confusing actions.
- Keep single order flow unchanged
- Map role permissions and UI triggers for each order state from portal dashboard

Assumptions
-----------
- Current order ID generation and existing small utilities remain compatible.
- Supplier metadata (default order type, payment method, tags) already exist and can be read.
- Changes are primarily front-end wiring + thin API adjustments; back-end changes should be minimal where possible.

Key concepts
------------
- BulkOrder (dispatch): collection of Orders for a store. Created from multiple supplier cards in the dispatch interface.
- Order: Contains an OrderHeader + supplierCard (list of items + quantities).
- SupplierCard: UI representation of an Order in dispatch and portal views.
- OrderHeader: metadata attached to an Order (store, order type, payment method, invoice amount/picture, etc.).
- Tags: supplier tags and order tags used to drive default values and rules.
- Statuses: finite states (Dispatching → Processing → On-the-way → Completed) with role-specific actions.

Data model (suggested fields)
----------------------------
- BulkOrder
	- id
	- storeId
	- createdBy (userId)
	- createdAt
	- orders: Order[]
	- status (Draft | Sent | Completed | Cancelled)

- Order
	- id
	- bulkOrderId? (nullable)
	- supplierId
	- items: { skuId, quantity, note? }[]
	- header: OrderHeader
	- status (Dispatching | Processing | OnTheWay | Completed)
	- invoiceAmount? number
	- invoicePictureUrl? string

- OrderHeader
	- orderId
	- storeId
	- orderType (non-null)
	- paymentMethod (non-null)
	- createdBy
	- createdAt

UI & UX changes
--------------
- Dispatch (Bulk) interface:
	- Show SupplierCards with item lists and quick qty edits.
	- Buttons per supplier card:
		- Action menu: "Add to order" (send single supplier Order to standard Order page) — unchanged.
		- Primary/inline button rename: current "dispatch" -> "Split order" (keeps dispatching behavior but clarifies that it creates per-supplier Orders locally).
		- Approve dispatch (bulk action): previously "add to order" at top level becomes "Approve dispatch" — creates/sends a BulkOrder (collection of Orders) to the portal.

- Order page (single orders):
	- Single Orders remain managed by Admin only.
	- Orders created from dispatch/bulk flow appear here and follow the normal order lifecycle.

Role responsibilities
---------------------
- Admin
	- Manage single orders via Order page. 
	- See and manage all BulkOrders in portal.
	- Mark orders paid/unpaid and finish flows.

- Manager
	- View BulkOrders and Orders assigned to their stores/places, once "Mark as sent" as been set by admin.
	- Mark as arrived / completed when on-the-way.

- Supplier
	- Receive Orders once a supplier-card Order is marked "Sent" from portal admin interface.
	- Can edit their Order during Processing (change qty, remove out-of-stock items, add invoice amount/picture).
	- Mark as on-the-way / Mark as paid (as appropriate per supplier rules).

Order states and actions (scaffold)
----------------------------------
- Dispatching (initial for orders created from dispatch)
	- UI: portal admin shows supplier cards sorted by place (tabs). Each card has "Mark as sent", "Mark as paid", "Mark as unpaid", "Mark as completed".
	- Action: "Mark as sent" makes the Order visible to that supplier, other actions remain available from admin interface.
  
- Processing
	- Supplier receives Order. They can:
		- change item quantity
		- remove items (no stock)
		- set invoice amount and attach invoice picture (url/upload/camera)
		- Mark as on-the-way

- On-the-way
	- Supplier marked order as on-the-way, visible from manager interface
	- Manager: "Mark as arrived" → Completed. Manager can adjust invoice amount or add invoice.
	- If payment method = COD, manager can mark as paid.

- Completed
	- Finalized orders. Payment flows differ per paymentMethod and supplier type:
		- LEES / PISEY: paid later — show "Mark as paid" in supplier interface.
		- Other suppliers: admin/manager actions handle payment marking (TrueMoney, Aba, CreditLine rules).

Renaming & small UX rules
-------------------------
- Rename dispatch-related buttons:
	- dispatch button → "Split order" (creates per-supplier Orders in local workspace)
	- top-level bulk send button (previously "Add to order") → "Approve dispatch" (creates/sends a BulkOrder to the portal)
	- Keep per-card action menu entry "Add to order" as the method to send single Orders directly to the standard Order page.

API and persistence notes
-------------------------
- Minimal backend shape changes: support BulkOrder create/read and link Orders to BulkOrder via bulkOrderId.
- Endpoints suggested (examples):
	- POST /bulk-orders
	- GET /bulk-orders/:id
	- POST /orders (accepts optional bulkOrderId)
	- PATCH /orders/:id/status
	- POST /orders/:id/invoice (upload)

Migration & compatibility
-------------------------
- Existing single orders remain compatible. When creating a BulkOrder, set bulkOrderId on created Orders.
- Migrate or map any legacy dispatch flags to new statuses (Dispatching → Processing etc.) at ingestion time.

Prioritized TODO (scoped, executable)
-----------------------------------

1) Core data wiring (high priority — 1-2 days)
	 - [ ] Add BulkOrder type and wire creation from dispatch UI (frontend change + minimal backend endpoint stub)
	 - [ ] Ensure Orders created from dispatch include header.defaults from supplier tags (orderType, paymentMethod)
	 - Acceptance: creating a BulkOrder returns IDs and Orders appear in portal list.

2) Button & UI renames + behavior (high priority — 1 day)
	 - [ ] Rename per-card "dispatch" -> "Split order" (local behavior)
	 - [ ] Rename top-level "Add to order" -> "Approve dispatch" to create/send BulkOrder
	 - [ ] Keep action menu "Add to order" to send single orders
	 - Acceptance: buttons reflect new labels and trigger correct create endpoints.

3) OrderHeader & status scaffold (medium — 1-2 days)
	 - [ ] Implement OrderHeader attach logic and defaulting rules
	 - [ ] Implement status field and state transition handlers (frontend + backend contract)
	 - Acceptance: Orders show header fields and can transition through Dispatching → Processing → OnTheWay → Completed.

4) Supplier actions & invoice flow (medium — 2 days)
	 - [ ] Supplier UI: allow edits to qty, remove items, set invoice amount, upload picture
	 - [ ] Implement "Mark as on-the-way" and supplier-side "Mark as paid" where applicable
	 - Acceptance: Supplier can update Order fields and transition status; changes persist.

5) Manager/admin actions and payment rules (low-medium — 2 days)
	 - [ ] Mark as arrived / completed flows for managers
	 - [ ] Payment marking per payment method and supplier special rules (LEES, PISEY)
	 - Acceptance: Manager/admin can finalize payments and order statuses match the business rules.

6) Tests, docs, and polish (low — 1-2 days)
	 - [ ] Unit tests for state transitions
	 - [ ] E2E test for dispatch → bulk approve → supplier flow
	 - [ ] Update README / internal docs for devs describing the flows and new endpoints

Edge cases & notes
------------------
- Partial success when sending BulkOrder (some supplier Orders may fail) — surface per-order errors and allow retry per supplier.
- Concurrent edits: supplier edits while manager changes status—resolve by last-write-wins or small optimistic-locking (version field) if supported.
- Missing supplier defaults: validate non-nullable fields (orderType, paymentMethod) and show a validation UI in dispatch.

Next steps (recommended immediate actions)
----------------------------------------
1. Create a small spike PR that adds the BulkOrder frontend type and a stub endpoint to POST /bulk-orders.
2. Update the dispatch UI labels (Split order, Approve dispatch) and confirm visual text changes.
3. Wire defaulting behavior for OrderHeader from supplier tags and add a single integration test for creating a BulkOrder.

Requirements coverage
---------------------
- Convert into structured plan: Done
- Add TODO list: Done (prioritized, with acceptance criteria)
- Convert to markdown: Done

If you'd like, I can now:
- create an initial PR that implements the BulkOrder type and endpoint stub, or
- open a branch and start by renaming the dispatch UI buttons and wiring the labels in code.

Assumptions & clarifications (brief)
-----------------------------------
- I assumed the backend can accept a bulkOrderId on Orders; if not, we can persist bulk relationships in a separate collection/table and adapt the plan.
- Time estimates are rough front-end + small backend changes for a single developer.

---
Generated: 2025-10-09